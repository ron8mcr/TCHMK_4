# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bigInt', [dirname(__file__)])
        except ImportError:
            import _bigInt
            return _bigInt
        if fp is not None:
            try:
                _mod = imp.load_module('_bigInt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bigInt = swig_import_helper()
    del swig_import_helper
else:
    import _bigInt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


BASE = _bigInt.BASE
MAX_10_LEN = _bigInt.MAX_10_LEN
DIVISION_BY_ZERO = _bigInt.DIVISION_BY_ZERO
class bigInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bigInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bigInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bigInt.new_bigInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bigInt.delete_bigInt
    __del__ = lambda self : None;
    def getString(self): return _bigInt.bigInt_getString(self)
    def getFromTextFile(self, *args): return _bigInt.bigInt_getFromTextFile(self, *args)
    def saveToTextFile(self, *args): return _bigInt.bigInt_saveToTextFile(self, *args)
    def saveToBinFile(self, *args): return _bigInt.bigInt_saveToBinFile(self, *args)
    def getFromBinFile(self, *args): return _bigInt.bigInt_getFromBinFile(self, *args)
    def __neg__(self): return _bigInt.bigInt___neg__(self)
    def __add__(self, *args): return _bigInt.bigInt___add__(self, *args)
    def __sub__(self, *args): return _bigInt.bigInt___sub__(self, *args)
    def __mul__(self, *args): return _bigInt.bigInt___mul__(self, *args)
    def __div__(self, *args): return _bigInt.bigInt___div__(self, *args)
    def __mod__(self, *args): return _bigInt.bigInt___mod__(self, *args)
    def __xor__(self, *args): return _bigInt.bigInt___xor__(self, *args)
    def __iadd__(self, *args): return _bigInt.bigInt___iadd__(self, *args)
    def __isub__(self, *args): return _bigInt.bigInt___isub__(self, *args)
    def __imul__(self, *args): return _bigInt.bigInt___imul__(self, *args)
    def __idiv__(self, *args): return _bigInt.bigInt___idiv__(self, *args)
    def __imod__(self, *args): return _bigInt.bigInt___imod__(self, *args)
    def __gt__(self, *args): return _bigInt.bigInt___gt__(self, *args)
    def __ge__(self, *args): return _bigInt.bigInt___ge__(self, *args)
    def __lt__(self, *args): return _bigInt.bigInt___lt__(self, *args)
    def __le__(self, *args): return _bigInt.bigInt___le__(self, *args)
    def __eq__(self, *args): return _bigInt.bigInt___eq__(self, *args)
    def __ne__(self, *args): return _bigInt.bigInt___ne__(self, *args)
    def __str__(self): return _bigInt.bigInt___str__(self)
bigInt_swigregister = _bigInt.bigInt_swigregister
bigInt_swigregister(bigInt)

def _simpleSum(*args):
  return _bigInt._simpleSum(*args)
_simpleSum = _bigInt._simpleSum

def _simpleMul(*args):
  return _bigInt._simpleMul(*args)
_simpleMul = _bigInt._simpleMul

def _divividing(*args):
  return _bigInt._divividing(*args)
_divividing = _bigInt._divividing

def _divColumn(*args):
  return _bigInt._divColumn(*args)
_divColumn = _bigInt._divColumn

def _divBinSearch(*args):
  return _bigInt._divBinSearch(*args)
_divBinSearch = _bigInt._divBinSearch


def pow(*args):
  return _bigInt.pow(*args)
pow = _bigInt.pow
# This file is compatible with both classic and new-style classes.


